{"ast":null,"code":"import _slicedToArray from \"C:/Users/Michael/Documents/reactJS/stax-of-stories-2/stax2/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Michael\\\\Documents\\\\reactJS\\\\stax-of-stories-2\\\\stax2\\\\frontend\\\\lib\\\\cartState.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext } from 'react';\nvar LocalStateContext = /*#__PURE__*/createContext();\nvar LocalStateProvider = LocalStateContext.Provider;\n\nfunction CartStateProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  // This is our own custom provider! We will store data (state) and functionality\n  // updaters in here and anyone can access it via the consumer!\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      cartOpen = _useState2[0],\n      setCartOpen = _useState2[1];\n\n  function toggleCart() {\n    setCartOpen(!cartOpen);\n  }\n\n  function closeCart() {\n    setCartOpen(false);\n  }\n\n  function openCart() {\n    setCartOpen(true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(LocalStateProvider, {\n    value: {\n      cartOpen: cartOpen,\n      setCartOpen: setCartOpen,\n      toggleCart: toggleCart,\n      closeCart: closeCart,\n      openCart: openCart\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n} // make a custom hook for accessing the cart local state\n\n\n_s(CartStateProvider, \"xe1WncxGrJWPKk54fyWehQszVXg=\");\n\n_c = CartStateProvider;\n\nfunction useCart() {\n  _s2();\n\n  // We use a consumer here to access the local state\n  var all = useContext(LocalStateContext);\n  return all;\n}\n\n_s2(useCart, \"k0r6hllA0ZVFTbsvyQUS1AVLOSY=\");\n\nexport { CartStateProvider, useCart };\n\nvar _c;\n\n$RefreshReg$(_c, \"CartStateProvider\");","map":{"version":3,"sources":["C:/Users/Michael/Documents/reactJS/stax-of-stories-2/stax2/frontend/lib/cartState.js"],"names":["createContext","useContext","LocalStateContext","LocalStateProvider","Provider","CartStateProvider","children","useState","cartOpen","setCartOpen","toggleCart","closeCart","openCart","useCart","all"],"mappings":";;;;;;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,QAA0C,OAA1C;AAEA,IAAMC,iBAAiB,gBAAGF,aAAa,EAAvC;AACA,IAAMG,kBAAkB,GAAGD,iBAAiB,CAACE,QAA7C;;AAEA,SAASC,iBAAT,OAAyC;AAAA;;AAAA,MAAZC,QAAY,QAAZA,QAAY;;AACrC;AACA;AAFqC,kBAILC,QAAQ,CAAC,KAAD,CAJH;AAAA;AAAA,MAI9BC,QAJ8B;AAAA,MAIpBC,WAJoB;;AAMrC,WAASC,UAAT,GAAsB;AAClBD,IAAAA,WAAW,CAAC,CAACD,QAAF,CAAX;AACH;;AAED,WAASG,SAAT,GAAqB;AACjBF,IAAAA,WAAW,CAAC,KAAD,CAAX;AACH;;AAED,WAASG,QAAT,GAAoB;AAChBH,IAAAA,WAAW,CAAC,IAAD,CAAX;AACH;;AAED,sBACI,QAAC,kBAAD;AAAoB,IAAA,KAAK,EAAE;AAAED,MAAAA,QAAQ,EAARA,QAAF;AAAYC,MAAAA,WAAW,EAAXA,WAAZ;AAAyBC,MAAAA,UAAU,EAAVA,UAAzB;AAAqCC,MAAAA,SAAS,EAATA,SAArC;AAAgDC,MAAAA,QAAQ,EAARA;AAAhD,KAA3B;AAAA,cACKN;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,C,CAED;;;GAzBSD,iB;;KAAAA,iB;;AA0BT,SAASQ,OAAT,GAAmB;AAAA;;AACf;AACA,MAAMC,GAAG,GAAGb,UAAU,CAACC,iBAAD,CAAtB;AACA,SAAOY,GAAP;AACH;;IAJQD,O;;AAKT,SAASR,iBAAT,EAA4BQ,OAA5B","sourcesContent":["import { createContext, useContext } from 'react';\r\n\r\nconst LocalStateContext = createContext();\r\nconst LocalStateProvider = LocalStateContext.Provider;\r\n\r\nfunction CartStateProvider({ children }) {\r\n    // This is our own custom provider! We will store data (state) and functionality\r\n    // updaters in here and anyone can access it via the consumer!\r\n\r\n    const [cartOpen, setCartOpen] = useState(false);\r\n\r\n    function toggleCart() {\r\n        setCartOpen(!cartOpen);\r\n    }\r\n\r\n    function closeCart() {\r\n        setCartOpen(false);\r\n    }\r\n\r\n    function openCart() {\r\n        setCartOpen(true); \r\n    }\r\n\r\n    return (\r\n        <LocalStateProvider value={{ cartOpen, setCartOpen, toggleCart, closeCart, openCart }}>\r\n            {children}\r\n        </LocalStateProvider>\r\n    );\r\n}\r\n\r\n// make a custom hook for accessing the cart local state\r\nfunction useCart() {\r\n    // We use a consumer here to access the local state\r\n    const all = useContext(LocalStateContext);\r\n    return all;\r\n}\r\nexport { CartStateProvider, useCart };"]},"metadata":{},"sourceType":"module"}