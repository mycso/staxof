{"ast":null,"code":"import { PAGINATION_QUERY } from \"../components/Pagination\";\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n\n    //tells apollo we will take care of everything.\n    read(existing = [], {\n      args,\n      cache\n    }) {\n      var _data$_allProductsMet;\n\n      console.log({\n        existing,\n        args,\n        cache\n      });\n      const {\n        skip,\n        first\n      } = args; //Read the number of items on the page from the cache\n\n      const data = cache.readquery({\n        query: PAGINATION_QUERY\n      });\n      const count = data === null || data === void 0 ? void 0 : (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count;\n      const page = skip / first + 1;\n      const pages = Math.ceil(count / first); // Check if we have existing items\n\n      const items = existing.slice(skip, skip + first).filter(x => x);\n\n      if (items.length && items.length !== first && page === pages) {\n        return items;\n      }\n\n      if (items.length !== first) {\n        // We don't have any items, we must go to the network to fetch them\n        return false;\n      } // If there are items, just reutrn them from the cache, and we don't need to go to the network\n\n\n      if (items.length) {\n        // console.log(\n        //   `There are ${items.length} items in the cache! Gonna send them to apollo`\n        // );\n        return items;\n      }\n\n      return false; // fallback to network\n    },\n\n    merge(existing, incoming, {\n      args\n    }) {\n      const {\n        skip,\n        first\n      } = args; //This runs when the apollo client comes back from the network with our product\n      // console.log(`Merging items from the network ${incoming.length}`);\n\n      const merged = existing ? existing.slice(0) : [];\n\n      for (let i = skip; i < skip + incoming.length; ++i) {\n        merged[i] = incoming[i - skip];\n      } //console.log(merged);\n      // Finally we return the merged items from the cache.\n\n\n      return merged;\n    }\n\n  };\n}","map":{"version":3,"sources":["C:/Users/Michael/Documents/reactJS/stax-of-stories-2/stax2/frontend/lib/paginationField.js"],"names":["PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","console","log","skip","first","data","readquery","query","count","_allProductsMeta","page","pages","Math","ceil","items","slice","filter","x","length","merge","incoming","merged","i"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,0BAAjC;AAEA,eAAe,SAASC,eAAT,GAA2B;AACtC,SAAO;AACHC,IAAAA,OAAO,EAAE,KADN;;AACa;AAChBC,IAAAA,IAAI,CAACC,QAAQ,GAAG,EAAZ,EAAgB;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAhB,EAAiC;AAAA;;AACjCC,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEJ,QAAAA,QAAF;AAAYC,QAAAA,IAAZ;AAAkBC,QAAAA;AAAlB,OAAZ;AACA,YAAM;AAAEG,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBL,IAAxB,CAFiC,CAIjC;;AACA,YAAMM,IAAI,GAAGL,KAAK,CAACM,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEb;AAAT,OAAhB,CAAb;AACA,YAAMc,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,gBAAT,0DAAG,sBAAwBD,KAAtC;AACA,YAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B;AACA,YAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd,CARiC,CAUjC;;AACA,YAAMU,KAAK,GAAGhB,QAAQ,CAACiB,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA2CC,CAAD,IAAOA,CAAjD,CAAd;;AAEA,UAAIH,KAAK,CAACI,MAAN,IAAgBJ,KAAK,CAACI,MAAN,KAAiBd,KAAjC,IAA0CM,IAAI,KAAKC,KAAvD,EAA8D;AAC1D,eAAOG,KAAP;AACH;;AACD,UAAIA,KAAK,CAACI,MAAN,KAAiBd,KAArB,EAA4B;AACxB;AACA,eAAO,KAAP;AACH,OAnBgC,CAqBjC;;;AACA,UAAIU,KAAK,CAACI,MAAV,EAAkB;AACd;AACA;AACA;AACA,eAAOJ,KAAP;AACH;;AAED,aAAO,KAAP,CA7BiC,CA6BnB;AACjB,KAhCE;;AAiCHK,IAAAA,KAAK,CAACrB,QAAD,EAAWsB,QAAX,EAAqB;AAAErB,MAAAA;AAAF,KAArB,EAA+B;AAChC,YAAM;AAAEI,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBL,IAAxB,CADgC,CAEhC;AACA;;AACA,YAAMsB,MAAM,GAAGvB,QAAQ,GAAGA,QAAQ,CAACiB,KAAT,CAAe,CAAf,CAAH,GAAuB,EAA9C;;AACA,WAAI,IAAIO,CAAC,GAAGnB,IAAZ,EAAkBmB,CAAC,GAAGnB,IAAI,GAAGiB,QAAQ,CAACF,MAAtC,EAA8C,EAAEI,CAAhD,EAAmD;AAC/CD,QAAAA,MAAM,CAACC,CAAD,CAAN,GAAYF,QAAQ,CAACE,CAAC,GAAGnB,IAAL,CAApB;AACH,OAP+B,CAQhC;AACA;;;AACA,aAAOkB,MAAP;AACH;;AA5CE,GAAP;AA8CH","sourcesContent":["import { PAGINATION_QUERY } from \"../components/Pagination\";\r\n\r\nexport default function paginationField() {\r\n    return {\r\n        keyArgs: false, //tells apollo we will take care of everything.\r\n        read(existing = [], { args, cache }) {\r\n            console.log({ existing, args, cache });\r\n            const { skip, first } = args;\r\n\r\n            //Read the number of items on the page from the cache\r\n            const data = cache.readquery({ query: PAGINATION_QUERY });\r\n            const count = data?._allProductsMeta?.count;\r\n            const page = skip / first + 1;\r\n            const pages = Math.ceil(count / first);\r\n\r\n            // Check if we have existing items\r\n            const items = existing.slice(skip, skip + first).filter((x) => x);\r\n            \r\n            if (items.length && items.length !== first && page === pages) {\r\n                return items;\r\n            }\r\n            if (items.length !== first) {\r\n                // We don't have any items, we must go to the network to fetch them\r\n                return false;\r\n            }\r\n\r\n            // If there are items, just reutrn them from the cache, and we don't need to go to the network\r\n            if (items.length) {\r\n                // console.log(\r\n                //   `There are ${items.length} items in the cache! Gonna send them to apollo`\r\n                // );\r\n                return items;\r\n            }\r\n\r\n            return false; // fallback to network\r\n        },\r\n        merge(existing, incoming, { args }) {\r\n            const { skip, first } = args;\r\n            //This runs when the apollo client comes back from the network with our product\r\n            // console.log(`Merging items from the network ${incoming.length}`);\r\n            const merged = existing ? existing.slice(0) : [];\r\n            for(let i = skip; i < skip + incoming.length; ++i) {\r\n                merged[i] = incoming[i - skip]; \r\n            }\r\n            //console.log(merged);\r\n            // Finally we return the merged items from the cache.\r\n            return merged;\r\n        },\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}