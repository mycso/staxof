{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nexport default function useForm(initial = {}) {\n  // create a state object for our inputs\n  const {\n    0: inputs,\n    1: setInputs\n  } = useState(initial); // {\n  //   name: 'wes',\n  //   description: 'nice shoes',\n  //   price: 1000\n  // }\n\n  function handleChange(e) {\n    let {\n      value,\n      name,\n      type\n    } = e.target;\n\n    if (type === 'number') {\n      value = parseInt(value);\n    }\n\n    if (type === 'file') {\n      [value] = e.target.files;\n      const data = new FormData();\n      data.append('file', value[0]);\n      data.append('upload_preset', 'staxxxx');\n      const res = fetch('https://api.cloudinary.com/v1_1/dcnxv4ksy/image/upload', {\n        method: 'POST',\n        body: data\n      });\n      const file = res.json();\n      console.log(file);\n    }\n\n    setInputs(_objectSpread(_objectSpread({}, inputs), {}, {\n      [name]: value\n    }));\n    console.log(value);\n  }\n\n  function resetForm() {\n    setInputs(initial);\n  }\n\n  function clearForm() {\n    const blankState = Object.fromEntries(Object.entries(inputs).map(([key, value]) => [key, '']));\n    setInputs(blankState);\n  } // return the things we want to surface from this custom hook\n\n\n  return {\n    inputs,\n    handleChange,\n    resetForm,\n    clearForm\n  };\n}","map":{"version":3,"sources":["C:/Users/Michael/Documents/reactJS/stax-of-stories-2/stax2/frontend/lib/useForm.js"],"names":["useState","useForm","initial","inputs","setInputs","handleChange","e","value","name","type","target","parseInt","files","data","FormData","append","res","fetch","method","body","file","json","console","log","resetForm","clearForm","blankState","Object","fromEntries","entries","map","key"],"mappings":";;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,eAAe,SAASC,OAAT,CAAiBC,OAAO,GAAG,EAA3B,EAA+B;AAC5C;AACA,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBJ,QAAQ,CAACE,OAAD,CAApC,CAF4C,CAI5C;AACA;AACA;AACA;AACA;;AAEA,WAASG,YAAT,CAAsBC,CAAtB,EAAyB;AACvB,QAAI;AAAEC,MAAAA,KAAF;AAASC,MAAAA,IAAT;AAAeC,MAAAA;AAAf,QAAwBH,CAAC,CAACI,MAA9B;;AACA,QAAID,IAAI,KAAK,QAAb,EAAuB;AACrBF,MAAAA,KAAK,GAAGI,QAAQ,CAACJ,KAAD,CAAhB;AACD;;AACD,QAAIE,IAAI,KAAK,MAAb,EAAqB;AACnB,OAACF,KAAD,IAAUD,CAAC,CAACI,MAAF,CAASE,KAAnB;AACA,YAAMC,IAAI,GAAG,IAAIC,QAAJ,EAAb;AACAD,MAAAA,IAAI,CAACE,MAAL,CAAY,MAAZ,EAAoBR,KAAK,CAAC,CAAD,CAAzB;AACAM,MAAAA,IAAI,CAACE,MAAL,CAAY,eAAZ,EAA6B,SAA7B;AAEA,YAAMC,GAAG,GAAGC,KAAK,CAAC,wDAAD,EAA2D;AAC1EC,QAAAA,MAAM,EAAE,MADkE;AAE1EC,QAAAA,IAAI,EAAEN;AAFoE,OAA3D,CAAjB;AAIA,YAAMO,IAAI,GAAGJ,GAAG,CAACK,IAAJ,EAAb;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACD;;AACDhB,IAAAA,SAAS,iCAEJD,MAFI;AAGP,OAACK,IAAD,GAAQD;AAHD,OAAT;AAMAe,IAAAA,OAAO,CAACC,GAAR,CAAYhB,KAAZ;AACD;;AAED,WAASiB,SAAT,GAAqB;AACnBpB,IAAAA,SAAS,CAACF,OAAD,CAAT;AACD;;AAED,WAASuB,SAAT,GAAqB;AACnB,UAAMC,UAAU,GAAGC,MAAM,CAACC,WAAP,CACjBD,MAAM,CAACE,OAAP,CAAe1B,MAAf,EAAuB2B,GAAvB,CAA2B,CAAC,CAACC,GAAD,EAAMxB,KAAN,CAAD,KAAkB,CAACwB,GAAD,EAAM,EAAN,CAA7C,CADiB,CAAnB;AAGA3B,IAAAA,SAAS,CAACsB,UAAD,CAAT;AACD,GA/C2C,CAiD5C;;;AACA,SAAO;AACLvB,IAAAA,MADK;AAELE,IAAAA,YAFK;AAGLmB,IAAAA,SAHK;AAILC,IAAAA;AAJK,GAAP;AAMD","sourcesContent":["import { useState } from 'react';\r\n\r\nexport default function useForm(initial = {}) {\r\n  // create a state object for our inputs\r\n  const [inputs, setInputs] = useState(initial);\r\n\r\n  // {\r\n  //   name: 'wes',\r\n  //   description: 'nice shoes',\r\n  //   price: 1000\r\n  // }\r\n\r\n  function handleChange(e) {\r\n    let { value, name, type } = e.target;\r\n    if (type === 'number') {\r\n      value = parseInt(value);\r\n    }\r\n    if (type === 'file') {\r\n      [value] = e.target.files;\r\n      const data = new FormData();\r\n      data.append('file', value[0]);\r\n      data.append('upload_preset', 'staxxxx');\r\n\r\n      const res = fetch('https://api.cloudinary.com/v1_1/dcnxv4ksy/image/upload', {\r\n        method: 'POST',\r\n        body: data,\r\n      });\r\n      const file = res.json();\r\n      \r\n      console.log(file);\r\n    }\r\n    setInputs({\r\n      // copy the existing state\r\n      ...inputs,\r\n      [name]: value,\r\n    });\r\n\r\n    console.log(value);\r\n  }\r\n\r\n  function resetForm() {\r\n    setInputs(initial);\r\n  }\r\n\r\n  function clearForm() {\r\n    const blankState = Object.fromEntries(\r\n      Object.entries(inputs).map(([key, value]) => [key, ''])\r\n    );\r\n    setInputs(blankState);\r\n  }\r\n\r\n  // return the things we want to surface from this custom hook\r\n  return {\r\n    inputs,\r\n    handleChange,\r\n    resetForm,\r\n    clearForm,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}