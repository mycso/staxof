{"ast":null,"code":"import { PAGINATION_QUERY } from \"../components/Pagination\";\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n    //tells apollo we will take care of everything.\n    read: function read() {\n      var _data$_allProductsMet;\n\n      var existing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      var _ref = arguments.length > 1 ? arguments[1] : undefined,\n          args = _ref.args,\n          cache = _ref.cache;\n\n      console.log({\n        existing: existing,\n        args: args,\n        cache: cache\n      });\n      var skip = args.skip,\n          first = args.first; //Read the number of items on the page from the cache\n\n      var data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      var count = data === null || data === void 0 ? void 0 : (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count;\n      var page = skip / first + 1;\n      var pages = Math.ceil(count / first); // Check if we have existing items\n\n      var items = existing.slice(skip, skip + first).filter(function (x) {\n        return x;\n      }); // If\n      // There are items\n      // AND there aren't enough items to satisfy how many were requested\n      // AND we are on the last page\n      // THEN JUST SEND IT\n\n      if (items.length && items.length !== first && page === pages) {\n        return items;\n      }\n\n      if (items.length !== first) {\n        // We don't have any items, we must go to the network to fetch them\n        return false;\n      } // If there are items, just reutrn them from the cache, and we don't need to go to the network\n\n\n      if (items.length) {\n        // console.log(\n        //   `There are ${items.length} items in the cache! Gonna send them to apollo`\n        // );\n        return items;\n      }\n\n      return false; // fallback to network\n    },\n    merge: function merge(existing, incoming, _ref2) {\n      var args = _ref2.args;\n      var skip = args.skip,\n          first = args.first; //This runs when the apollo client comes back from the network with our product\n      // console.log(`Merging items from the network ${incoming.length}`);\n\n      var merged = existing ? existing.slice(0) : [];\n\n      for (var i = skip; i < skip + incoming.length; ++i) {\n        merged[i] = incoming[i - skip];\n      } //console.log(merged);\n      // Finally we return the merged items from the cache.\n\n\n      return merged;\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/Michael/Documents/reactJS/stax-of-stories-2/stax2/frontend/lib/paginationField.js"],"names":["PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","console","log","skip","first","data","readQuery","query","count","_allProductsMeta","page","pages","Math","ceil","items","slice","filter","x","length","merge","incoming","merged","i"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,0BAAjC;AAEA,eAAe,SAASC,eAAT,GAA2B;AACtC,SAAO;AACHC,IAAAA,OAAO,EAAE,KADN;AACa;AAChBC,IAAAA,IAFG,kBAEkC;AAAA;;AAAA,UAAhCC,QAAgC,uEAArB,EAAqB;;AAAA;AAAA,UAAfC,IAAe,QAAfA,IAAe;AAAA,UAATC,KAAS,QAATA,KAAS;;AACjCC,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEJ,QAAAA,QAAQ,EAARA,QAAF;AAAYC,QAAAA,IAAI,EAAJA,IAAZ;AAAkBC,QAAAA,KAAK,EAALA;AAAlB,OAAZ;AADiC,UAEzBG,IAFyB,GAETJ,IAFS,CAEzBI,IAFyB;AAAA,UAEnBC,KAFmB,GAETL,IAFS,CAEnBK,KAFmB,EAIjC;;AACA,UAAMC,IAAI,GAAGL,KAAK,CAACM,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEb;AAAT,OAAhB,CAAb;AACA,UAAMc,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,gBAAT,0DAAG,sBAAwBD,KAAtC;AACA,UAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B;AACA,UAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd,CARiC,CAUjC;;AACA,UAAMU,KAAK,GAAGhB,QAAQ,CAACiB,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA0C,UAACC,CAAD;AAAA,eAAOA,CAAP;AAAA,OAA1C,CAAd,CAXiC,CAajC;AACA;AACA;AACA;AACA;;AAEA,UAAIH,KAAK,CAACI,MAAN,IAAgBJ,KAAK,CAACI,MAAN,KAAiBd,KAAjC,IAA0CM,IAAI,KAAKC,KAAvD,EAA8D;AAC1D,eAAOG,KAAP;AACH;;AACD,UAAIA,KAAK,CAACI,MAAN,KAAiBd,KAArB,EAA4B;AACxB;AACA,eAAO,KAAP;AACH,OAzBgC,CA2BjC;;;AACA,UAAIU,KAAK,CAACI,MAAV,EAAkB;AACd;AACA;AACA;AACA,eAAOJ,KAAP;AACH;;AAED,aAAO,KAAP,CAnCiC,CAmCnB;AACjB,KAtCE;AAuCHK,IAAAA,KAvCG,iBAuCGrB,QAvCH,EAuCasB,QAvCb,SAuCiC;AAAA,UAARrB,IAAQ,SAARA,IAAQ;AAAA,UACxBI,IADwB,GACRJ,IADQ,CACxBI,IADwB;AAAA,UAClBC,KADkB,GACRL,IADQ,CAClBK,KADkB,EAEhC;AACA;;AACA,UAAMiB,MAAM,GAAGvB,QAAQ,GAAGA,QAAQ,CAACiB,KAAT,CAAe,CAAf,CAAH,GAAuB,EAA9C;;AACA,WAAI,IAAIO,CAAC,GAAGnB,IAAZ,EAAkBmB,CAAC,GAAGnB,IAAI,GAAGiB,QAAQ,CAACF,MAAtC,EAA8C,EAAEI,CAAhD,EAAmD;AAC/CD,QAAAA,MAAM,CAACC,CAAD,CAAN,GAAYF,QAAQ,CAACE,CAAC,GAAGnB,IAAL,CAApB;AACH,OAP+B,CAQhC;AACA;;;AACA,aAAOkB,MAAP;AACH;AAlDE,GAAP;AAoDH","sourcesContent":["import { PAGINATION_QUERY } from \"../components/Pagination\";\r\n\r\nexport default function paginationField() {\r\n    return {\r\n        keyArgs: false, //tells apollo we will take care of everything.\r\n        read(existing = [], { args, cache }) {\r\n            console.log({ existing, args, cache });\r\n            const { skip, first } = args;\r\n\r\n            //Read the number of items on the page from the cache\r\n            const data = cache.readQuery({ query: PAGINATION_QUERY });\r\n            const count = data?._allProductsMeta?.count;\r\n            const page = skip / first + 1;\r\n            const pages = Math.ceil(count / first);\r\n\r\n            // Check if we have existing items\r\n            const items = existing.slice(skip, skip + first).filter((x) => x);\r\n            \r\n            // If\r\n            // There are items\r\n            // AND there aren't enough items to satisfy how many were requested\r\n            // AND we are on the last page\r\n            // THEN JUST SEND IT\r\n\r\n            if (items.length && items.length !== first && page === pages) {\r\n                return items;\r\n            }\r\n            if (items.length !== first) {\r\n                // We don't have any items, we must go to the network to fetch them\r\n                return false;\r\n            }\r\n\r\n            // If there are items, just reutrn them from the cache, and we don't need to go to the network\r\n            if (items.length) {\r\n                // console.log(\r\n                //   `There are ${items.length} items in the cache! Gonna send them to apollo`\r\n                // );\r\n                return items;\r\n            }\r\n\r\n            return false; // fallback to network\r\n        },\r\n        merge(existing, incoming, { args }) {\r\n            const { skip, first } = args;\r\n            //This runs when the apollo client comes back from the network with our product\r\n            // console.log(`Merging items from the network ${incoming.length}`);\r\n            const merged = existing ? existing.slice(0) : [];\r\n            for(let i = skip; i < skip + incoming.length; ++i) {\r\n                merged[i] = incoming[i - skip]; \r\n            }\r\n            //console.log(merged);\r\n            // Finally we return the merged items from the cache.\r\n            return merged;\r\n        },\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}