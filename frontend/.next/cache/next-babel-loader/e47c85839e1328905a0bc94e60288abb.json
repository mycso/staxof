{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nexport default function useForm(initial = {}) {\n  // create a state object for our inputs\n  const {\n    0: inputs,\n    1: setInputs\n  } = useState(initial);\n\n  function handleChange(e) {\n    let {\n      value,\n      name,\n      type\n    } = e.target;\n\n    if (type === 'number') {\n      value = parseInt(value);\n    }\n\n    if (type === 'flie') {\n      value[0] = e.target.files;\n    }\n\n    setInputs(_objectSpread(_objectSpread({}, inputs), {}, {\n      [name]: value\n    }));\n  }\n\n  function resetForm() {\n    setInputs(initial);\n  }\n\n  function clearForm() {\n    const blankState = Object.entries(inputs).map(([key, value]) => []);\n  } // return the things we want to surface from this custom hook\n\n\n  return {\n    inputs,\n    handleChange,\n    resetForm\n  };\n}","map":{"version":3,"sources":["C:/Users/Michael/Documents/reactJS/stax-of-stories-2/stax2/frontend/lib/useForm.js"],"names":["useState","useForm","initial","inputs","setInputs","handleChange","e","value","name","type","target","parseInt","files","resetForm","clearForm","blankState","Object","entries","map","key"],"mappings":";;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,eAAe,SAASC,OAAT,CAAiBC,OAAO,GAAG,EAA3B,EAA+B;AAC1C;AACA,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBJ,QAAQ,CAACE,OAAD,CAApC;;AAEA,WAASG,YAAT,CAAsBC,CAAtB,EAAyB;AACrB,QAAI;AAAEC,MAAAA,KAAF;AAASC,MAAAA,IAAT;AAAeC,MAAAA;AAAf,QAAwBH,CAAC,CAACI,MAA9B;;AACA,QAAID,IAAI,KAAK,QAAb,EAAuB;AACnBF,MAAAA,KAAK,GAAGI,QAAQ,CAACJ,KAAD,CAAhB;AACH;;AACD,QAAGE,IAAI,KAAK,MAAZ,EAAoB;AAChBF,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAWD,CAAC,CAACI,MAAF,CAASE,KAApB;AACH;;AAEDR,IAAAA,SAAS,iCAEFD,MAFE;AAGL,OAACK,IAAD,GAAQD;AAHH,OAAT;AAKH;;AAED,WAASM,SAAT,GAAqB;AACjBT,IAAAA,SAAS,CAACF,OAAD,CAAT;AACH;;AAED,WAASY,SAAT,GAAqB;AACjB,UAAMC,UAAU,GAAGC,MAAM,CAACC,OAAP,CAAed,MAAf,EAAuBe,GAAvB,CAA2B,CAAC,CAACC,GAAD,EAAMZ,KAAN,CAAD,KAAkB,EAA7C,CAAnB;AACH,GA1ByC,CA4B1C;;;AACA,SAAO;AACHJ,IAAAA,MADG;AAEHE,IAAAA,YAFG;AAGHQ,IAAAA;AAHG,GAAP;AAKH","sourcesContent":["import { useState } from 'react';\r\n\r\nexport default function useForm(initial = {}) {\r\n    // create a state object for our inputs\r\n    const [inputs, setInputs] = useState(initial);\r\n\r\n    function handleChange(e) {\r\n        let { value, name, type } = e.target;\r\n        if (type === 'number') {\r\n            value = parseInt(value);\r\n        }\r\n        if(type === 'flie') {\r\n            value[0] = e.target.files;\r\n        }\r\n\r\n        setInputs({\r\n            //copy the existing state\r\n            ...inputs,\r\n            [name]: value,\r\n        })\r\n    }\r\n\r\n    function resetForm() {\r\n        setInputs(initial);\r\n    }\r\n\r\n    function clearForm() {\r\n        const blankState = Object.entries(inputs).map(([key, value]) => [])\r\n    }\r\n\r\n    // return the things we want to surface from this custom hook\r\n    return {\r\n        inputs,\r\n        handleChange,\r\n        resetForm,\r\n    };\r\n}"]},"metadata":{},"sourceType":"module"}