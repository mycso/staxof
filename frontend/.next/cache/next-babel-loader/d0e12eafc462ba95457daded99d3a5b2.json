{"ast":null,"code":"import { PAGINATION_QUERY } from \"../components/Pagination\";\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n    //tells apollo we will take care of everything.\n    read: function read() {\n      var _data$_allProductsMet;\n\n      var existing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      var _ref = arguments.length > 1 ? arguments[1] : undefined,\n          args = _ref.args,\n          cache = _ref.cache;\n\n      console.log({\n        existing: existing,\n        args: args,\n        cache: cache\n      });\n      var skip = args.skip,\n          first = args.first; //Read the number of items on the page from the cache\n\n      var data = cache.readquery({\n        query: PAGINATION_QUERY\n      });\n      var count = data === null || data === void 0 ? void 0 : (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count;\n      var page = skip / first + 1;\n      var pages = Math.ceil(count / first); // Check if we have existing items\n\n      var items = existing.slice(skip, skip + first).filter(function (x) {\n        return x;\n      });\n\n      if (items.length !== first) {\n        // We don't have any items,  we must go to the network to fetch them    \n        return false;\n      } //If there are items, just rerun them from the cache, and we don't need to go to the network.\n\n\n      if (items.length) {\n        console.log(\"There are \".concat(items.length, \" items in the cache! Gonna send them to apollo\"));\n        return itmes;\n      }\n\n      return false; //fallback to network\n    },\n    merge: function merge(existing, incoming, _ref2) {\n      var args = _ref2.args;\n      //This runs when the apollo client comes back from the network with our product\n      console.log(\"Merging items from the network \".concat(incoming.length));\n      var merged = existing ? existing.slice(0) : [];\n      merged.push(incoming);\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/Michael/Documents/reactJS/stax-of-stories-2/stax2/frontend/lib/paginationField.js"],"names":["PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","console","log","skip","first","data","readquery","query","count","_allProductsMeta","page","pages","Math","ceil","items","slice","filter","x","length","itmes","merge","incoming","merged","push"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,0BAAjC;AAEA,eAAe,SAASC,eAAT,GAA2B;AACtC,SAAO;AACHC,IAAAA,OAAO,EAAE,KADN;AACa;AAChBC,IAAAA,IAFG,kBAEkC;AAAA;;AAAA,UAAhCC,QAAgC,uEAArB,EAAqB;;AAAA;AAAA,UAAfC,IAAe,QAAfA,IAAe;AAAA,UAATC,KAAS,QAATA,KAAS;;AACjCC,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEJ,QAAAA,QAAQ,EAARA,QAAF;AAAYC,QAAAA,IAAI,EAAJA,IAAZ;AAAkBC,QAAAA,KAAK,EAALA;AAAlB,OAAZ;AADiC,UAEzBG,IAFyB,GAETJ,IAFS,CAEzBI,IAFyB;AAAA,UAEnBC,KAFmB,GAETL,IAFS,CAEnBK,KAFmB,EAIjC;;AACA,UAAMC,IAAI,GAAGL,KAAK,CAACM,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEb;AAAT,OAAhB,CAAb;AACA,UAAMc,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,gBAAT,0DAAG,sBAAwBD,KAAtC;AACA,UAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B;AACA,UAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd,CARiC,CAUjC;;AACA,UAAMU,KAAK,GAAGhB,QAAQ,CAACiB,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA0C,UAACC,CAAD;AAAA,eAAOA,CAAP;AAAA,OAA1C,CAAd;;AACA,UAAGH,KAAK,CAACI,MAAN,KAAiBd,KAApB,EAA2B;AACvB;AACA,eAAO,KAAP;AACH,OAfgC,CAiBjC;;;AACA,UAAIU,KAAK,CAACI,MAAV,EAAkB;AACdjB,QAAAA,OAAO,CAACC,GAAR,qBACiBY,KAAK,CAACI,MADvB;AAGA,eAAOC,KAAP;AACH;;AAED,aAAO,KAAP,CAzBiC,CAyBnB;AACjB,KA5BE;AA6BHC,IAAAA,KA7BG,iBA6BGtB,QA7BH,EA6BauB,QA7Bb,SA6BiC;AAAA,UAARtB,IAAQ,SAARA,IAAQ;AAChC;AACAE,MAAAA,OAAO,CAACC,GAAR,0CAA8CmB,QAAQ,CAACH,MAAvD;AACA,UAAMI,MAAM,GAAGxB,QAAQ,GAAGA,QAAQ,CAACiB,KAAT,CAAe,CAAf,CAAH,GAAuB,EAA9C;AACAO,MAAAA,MAAM,CAACC,IAAP,CAAYF,QAAZ;AACH;AAlCE,GAAP;AAoCH","sourcesContent":["import { PAGINATION_QUERY } from \"../components/Pagination\";\r\n\r\nexport default function paginationField() {\r\n    return {\r\n        keyArgs: false, //tells apollo we will take care of everything.\r\n        read(existing = [], { args, cache }) {\r\n            console.log({ existing, args, cache });\r\n            const { skip, first } = args;\r\n\r\n            //Read the number of items on the page from the cache\r\n            const data = cache.readquery({ query: PAGINATION_QUERY });\r\n            const count = data?._allProductsMeta?.count;\r\n            const page = skip / first + 1;\r\n            const pages = Math.ceil(count / first);\r\n\r\n            // Check if we have existing items\r\n            const items = existing.slice(skip, skip + first).filter((x) => x);\r\n            if(items.length !== first) {\r\n                // We don't have any items,  we must go to the network to fetch them    \r\n                return false;\r\n            }\r\n\r\n            //If there are items, just rerun them from the cache, and we don't need to go to the network.\r\n            if (items.length) {\r\n                console.log (\r\n                    `There are ${items.length} items in the cache! Gonna send them to apollo`\r\n                );\r\n                return itmes;\r\n            }\r\n\r\n            return false; //fallback to network\r\n        },\r\n        merge(existing, incoming, { args }) {\r\n            //This runs when the apollo client comes back from the network with our product\r\n            console.log(`Merging items from the network ${incoming.length}`);\r\n            const merged = existing ? existing.slice(0) : [];\r\n            merged.push(incoming)\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}