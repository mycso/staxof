// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  cartItem: (where?: CartItemWhereInput) => Promise<boolean>;
  item: (where?: ItemWhereInput) => Promise<boolean>;
  rating: (where?: RatingWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  cartItem: (where: CartItemWhereUniqueInput) => CartItemNullablePromise;
  cartItems: (args?: {
    where?: CartItemWhereInput;
    orderBy?: CartItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<CartItem>;
  cartItemsConnection: (args?: {
    where?: CartItemWhereInput;
    orderBy?: CartItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CartItemConnectionPromise;
  item: (where: ItemWhereUniqueInput) => ItemNullablePromise;
  items: (args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Item>;
  itemsConnection: (args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ItemConnectionPromise;
  rating: (where: RatingWhereUniqueInput) => RatingNullablePromise;
  ratings: (args?: {
    where?: RatingWhereInput;
    orderBy?: RatingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Rating>;
  ratingsConnection: (args?: {
    where?: RatingWhereInput;
    orderBy?: RatingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RatingConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCartItem: (data: CartItemCreateInput) => CartItemPromise;
  updateCartItem: (args: {
    data: CartItemUpdateInput;
    where: CartItemWhereUniqueInput;
  }) => CartItemPromise;
  updateManyCartItems: (args: {
    data: CartItemUpdateManyMutationInput;
    where?: CartItemWhereInput;
  }) => BatchPayloadPromise;
  upsertCartItem: (args: {
    where: CartItemWhereUniqueInput;
    create: CartItemCreateInput;
    update: CartItemUpdateInput;
  }) => CartItemPromise;
  deleteCartItem: (where: CartItemWhereUniqueInput) => CartItemPromise;
  deleteManyCartItems: (where?: CartItemWhereInput) => BatchPayloadPromise;
  createItem: (data: ItemCreateInput) => ItemPromise;
  updateItem: (args: {
    data: ItemUpdateInput;
    where: ItemWhereUniqueInput;
  }) => ItemPromise;
  updateManyItems: (args: {
    data: ItemUpdateManyMutationInput;
    where?: ItemWhereInput;
  }) => BatchPayloadPromise;
  upsertItem: (args: {
    where: ItemWhereUniqueInput;
    create: ItemCreateInput;
    update: ItemUpdateInput;
  }) => ItemPromise;
  deleteItem: (where: ItemWhereUniqueInput) => ItemPromise;
  deleteManyItems: (where?: ItemWhereInput) => BatchPayloadPromise;
  createRating: (data: RatingCreateInput) => RatingPromise;
  updateRating: (args: {
    data: RatingUpdateInput;
    where: RatingWhereUniqueInput;
  }) => RatingPromise;
  updateManyRatings: (args: {
    data: RatingUpdateManyMutationInput;
    where?: RatingWhereInput;
  }) => BatchPayloadPromise;
  upsertRating: (args: {
    where: RatingWhereUniqueInput;
    create: RatingCreateInput;
    update: RatingUpdateInput;
  }) => RatingPromise;
  deleteRating: (where: RatingWhereUniqueInput) => RatingPromise;
  deleteManyRatings: (where?: RatingWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  cartItem: (
    where?: CartItemSubscriptionWhereInput
  ) => CartItemSubscriptionPayloadSubscription;
  item: (
    where?: ItemSubscriptionWhereInput
  ) => ItemSubscriptionPayloadSubscription;
  rating: (
    where?: RatingSubscriptionWhereInput
  ) => RatingSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Permission =
  | "ADMIN"
  | "USER"
  | "ITEMCREATE"
  | "ITEMUPDATE"
  | "ITEMDELETE"
  | "PERMISSIONUPDATE"
  | "RATINGCREATE";

export type CartItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "quantity_ASC"
  | "quantity_DESC";

export type Category =
  | "YEAR_0"
  | "YEAR_1_4"
  | "YEAR_5_6"
  | "YEAR_7_8"
  | "YEAR_8_9"
  | "YEAR_10_11"
  | "YEAR_12_13"
  | "POETRY"
  | "WRITING"
  | "INSPIRE"
  | "SCIENCE"
  | "POLITICS"
  | "LIFESTYLE"
  | "HISTORY"
  | "ANIMALS"
  | "PARENTHOOD"
  | "TRAVEL"
  | "INDIA"
  | "CHINA"
  | "AFRICA"
  | "US"
  | "UK"
  | "WORLD";

export type RatingOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ratingSubject_ASC"
  | "ratingSubject_DESC"
  | "ratingDescription_ASC"
  | "ratingDescription_DESC"
  | "ratingImage_ASC"
  | "ratingImage_DESC"
  | "ratingStar_ASC"
  | "ratingStar_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type ItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "image_ASC"
  | "image_DESC"
  | "largeImage_ASC"
  | "largeImage_DESC"
  | "price_ASC"
  | "price_DESC"
  | "author_ASC"
  | "author_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "resetToken_ASC"
  | "resetToken_DESC"
  | "resetTokenExpiry_ASC"
  | "resetTokenExpiry_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ItemUpdateOneRequiredInput {
  create?: Maybe<ItemCreateInput>;
  update?: Maybe<ItemUpdateDataInput>;
  upsert?: Maybe<ItemUpsertNestedInput>;
  connect?: Maybe<ItemWhereUniqueInput>;
}

export type CartItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface RatingCreateManyWithoutUserInput {
  create?: Maybe<RatingCreateWithoutUserInput[] | RatingCreateWithoutUserInput>;
  connect?: Maybe<RatingWhereUniqueInput[] | RatingWhereUniqueInput>;
}

export interface RatingUpdateWithWhereUniqueWithoutItemInput {
  where: RatingWhereUniqueInput;
  data: RatingUpdateWithoutItemDataInput;
}

export interface RatingCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  ratingSubject: String;
  ratingDescription: String;
  ratingImage?: Maybe<String>;
  ratingStar?: Maybe<Int>;
  item: ItemCreateOneWithoutRatingListInput;
}

export interface UserUpdateDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  permissions?: Maybe<UserUpdatepermissionsInput>;
  cart?: Maybe<CartItemUpdateManyWithoutUserInput>;
  ratingList?: Maybe<RatingUpdateManyWithoutUserInput>;
}

export interface ItemCreateOneWithoutRatingListInput {
  create?: Maybe<ItemCreateWithoutRatingListInput>;
  connect?: Maybe<ItemWhereUniqueInput>;
}

export interface ItemWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  largeImage?: Maybe<String>;
  largeImage_not?: Maybe<String>;
  largeImage_in?: Maybe<String[] | String>;
  largeImage_not_in?: Maybe<String[] | String>;
  largeImage_lt?: Maybe<String>;
  largeImage_lte?: Maybe<String>;
  largeImage_gt?: Maybe<String>;
  largeImage_gte?: Maybe<String>;
  largeImage_contains?: Maybe<String>;
  largeImage_not_contains?: Maybe<String>;
  largeImage_starts_with?: Maybe<String>;
  largeImage_not_starts_with?: Maybe<String>;
  largeImage_ends_with?: Maybe<String>;
  largeImage_not_ends_with?: Maybe<String>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  author?: Maybe<String>;
  author_not?: Maybe<String>;
  author_in?: Maybe<String[] | String>;
  author_not_in?: Maybe<String[] | String>;
  author_lt?: Maybe<String>;
  author_lte?: Maybe<String>;
  author_gt?: Maybe<String>;
  author_gte?: Maybe<String>;
  author_contains?: Maybe<String>;
  author_not_contains?: Maybe<String>;
  author_starts_with?: Maybe<String>;
  author_not_starts_with?: Maybe<String>;
  author_ends_with?: Maybe<String>;
  author_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  user?: Maybe<UserWhereInput>;
  ratingList_every?: Maybe<RatingWhereInput>;
  ratingList_some?: Maybe<RatingWhereInput>;
  ratingList_none?: Maybe<RatingWhereInput>;
  AND?: Maybe<ItemWhereInput[] | ItemWhereInput>;
  OR?: Maybe<ItemWhereInput[] | ItemWhereInput>;
  NOT?: Maybe<ItemWhereInput[] | ItemWhereInput>;
}

export interface ItemCreateWithoutRatingListInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  image?: Maybe<String>;
  largeImage?: Maybe<String>;
  price: Int;
  author?: Maybe<String>;
  categories?: Maybe<ItemCreatecategoriesInput>;
  user: UserCreateOneInput;
}

export interface RatingWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  ratingSubject?: Maybe<String>;
  ratingSubject_not?: Maybe<String>;
  ratingSubject_in?: Maybe<String[] | String>;
  ratingSubject_not_in?: Maybe<String[] | String>;
  ratingSubject_lt?: Maybe<String>;
  ratingSubject_lte?: Maybe<String>;
  ratingSubject_gt?: Maybe<String>;
  ratingSubject_gte?: Maybe<String>;
  ratingSubject_contains?: Maybe<String>;
  ratingSubject_not_contains?: Maybe<String>;
  ratingSubject_starts_with?: Maybe<String>;
  ratingSubject_not_starts_with?: Maybe<String>;
  ratingSubject_ends_with?: Maybe<String>;
  ratingSubject_not_ends_with?: Maybe<String>;
  ratingDescription?: Maybe<String>;
  ratingDescription_not?: Maybe<String>;
  ratingDescription_in?: Maybe<String[] | String>;
  ratingDescription_not_in?: Maybe<String[] | String>;
  ratingDescription_lt?: Maybe<String>;
  ratingDescription_lte?: Maybe<String>;
  ratingDescription_gt?: Maybe<String>;
  ratingDescription_gte?: Maybe<String>;
  ratingDescription_contains?: Maybe<String>;
  ratingDescription_not_contains?: Maybe<String>;
  ratingDescription_starts_with?: Maybe<String>;
  ratingDescription_not_starts_with?: Maybe<String>;
  ratingDescription_ends_with?: Maybe<String>;
  ratingDescription_not_ends_with?: Maybe<String>;
  ratingImage?: Maybe<String>;
  ratingImage_not?: Maybe<String>;
  ratingImage_in?: Maybe<String[] | String>;
  ratingImage_not_in?: Maybe<String[] | String>;
  ratingImage_lt?: Maybe<String>;
  ratingImage_lte?: Maybe<String>;
  ratingImage_gt?: Maybe<String>;
  ratingImage_gte?: Maybe<String>;
  ratingImage_contains?: Maybe<String>;
  ratingImage_not_contains?: Maybe<String>;
  ratingImage_starts_with?: Maybe<String>;
  ratingImage_not_starts_with?: Maybe<String>;
  ratingImage_ends_with?: Maybe<String>;
  ratingImage_not_ends_with?: Maybe<String>;
  ratingStar?: Maybe<Int>;
  ratingStar_not?: Maybe<Int>;
  ratingStar_in?: Maybe<Int[] | Int>;
  ratingStar_not_in?: Maybe<Int[] | Int>;
  ratingStar_lt?: Maybe<Int>;
  ratingStar_lte?: Maybe<Int>;
  ratingStar_gt?: Maybe<Int>;
  ratingStar_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  item?: Maybe<ItemWhereInput>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<RatingWhereInput[] | RatingWhereInput>;
  OR?: Maybe<RatingWhereInput[] | RatingWhereInput>;
  NOT?: Maybe<RatingWhereInput[] | RatingWhereInput>;
}

export interface RatingCreateManyWithoutItemInput {
  create?: Maybe<RatingCreateWithoutItemInput[] | RatingCreateWithoutItemInput>;
  connect?: Maybe<RatingWhereUniqueInput[] | RatingWhereUniqueInput>;
}

export interface RatingSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RatingWhereInput>;
  AND?: Maybe<RatingSubscriptionWhereInput[] | RatingSubscriptionWhereInput>;
  OR?: Maybe<RatingSubscriptionWhereInput[] | RatingSubscriptionWhereInput>;
  NOT?: Maybe<RatingSubscriptionWhereInput[] | RatingSubscriptionWhereInput>;
}

export interface RatingCreateWithoutItemInput {
  id?: Maybe<ID_Input>;
  ratingSubject: String;
  ratingDescription: String;
  ratingImage?: Maybe<String>;
  ratingStar?: Maybe<Int>;
  user: UserCreateOneWithoutRatingListInput;
}

export interface CartItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CartItemWhereInput>;
  AND?: Maybe<
    CartItemSubscriptionWhereInput[] | CartItemSubscriptionWhereInput
  >;
  OR?: Maybe<CartItemSubscriptionWhereInput[] | CartItemSubscriptionWhereInput>;
  NOT?: Maybe<
    CartItemSubscriptionWhereInput[] | CartItemSubscriptionWhereInput
  >;
}

export interface UserCreateOneWithoutRatingListInput {
  create?: Maybe<UserCreateWithoutRatingListInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  permissions?: Maybe<UserUpdatepermissionsInput>;
  cart?: Maybe<CartItemUpdateManyWithoutUserInput>;
  ratingList?: Maybe<RatingUpdateManyWithoutUserInput>;
}

export interface UserCreateWithoutRatingListInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  permissions?: Maybe<UserCreatepermissionsInput>;
  cart?: Maybe<CartItemCreateManyWithoutUserInput>;
}

export interface RatingUpdateInput {
  ratingSubject?: Maybe<String>;
  ratingDescription?: Maybe<String>;
  ratingImage?: Maybe<String>;
  ratingStar?: Maybe<Int>;
  item?: Maybe<ItemUpdateOneRequiredWithoutRatingListInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutRatingListInput>;
}

export interface UserCreateOneWithoutCartInput {
  create?: Maybe<UserCreateWithoutCartInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface RatingCreateInput {
  id?: Maybe<ID_Input>;
  ratingSubject: String;
  ratingDescription: String;
  ratingImage?: Maybe<String>;
  ratingStar?: Maybe<Int>;
  item: ItemCreateOneWithoutRatingListInput;
  user: UserCreateOneWithoutRatingListInput;
}

export interface UserCreateWithoutCartInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  permissions?: Maybe<UserCreatepermissionsInput>;
  ratingList?: Maybe<RatingCreateManyWithoutUserInput>;
}

export interface ItemUpdateInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  image?: Maybe<String>;
  largeImage?: Maybe<String>;
  price?: Maybe<Int>;
  author?: Maybe<String>;
  categories?: Maybe<ItemUpdatecategoriesInput>;
  user?: Maybe<UserUpdateOneRequiredInput>;
  ratingList?: Maybe<RatingUpdateManyWithoutItemInput>;
}

export interface CartItemUpdateInput {
  quantity?: Maybe<Int>;
  item?: Maybe<ItemUpdateOneRequiredInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutCartInput>;
}

export type RatingWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpdateOneRequiredWithoutRatingListInput {
  create?: Maybe<UserCreateWithoutRatingListInput>;
  update?: Maybe<UserUpdateWithoutRatingListDataInput>;
  upsert?: Maybe<UserUpsertWithoutRatingListInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCartDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  permissions?: Maybe<UserUpdatepermissionsInput>;
  ratingList?: Maybe<RatingUpdateManyWithoutUserInput>;
}

export interface ItemUpdateDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  image?: Maybe<String>;
  largeImage?: Maybe<String>;
  price?: Maybe<Int>;
  author?: Maybe<String>;
  categories?: Maybe<ItemUpdatecategoriesInput>;
  user?: Maybe<UserUpdateOneRequiredInput>;
  ratingList?: Maybe<RatingUpdateManyWithoutItemInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface ItemUpdatecategoriesInput {
  set?: Maybe<Category[] | Category>;
}

export interface RatingUpsertWithWhereUniqueWithoutItemInput {
  where: RatingWhereUniqueInput;
  update: RatingUpdateWithoutItemDataInput;
  create: RatingCreateWithoutItemInput;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutRatingListDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  permissions?: Maybe<UserUpdatepermissionsInput>;
  cart?: Maybe<CartItemUpdateManyWithoutUserInput>;
}

export interface RatingUpdateWithoutItemDataInput {
  ratingSubject?: Maybe<String>;
  ratingDescription?: Maybe<String>;
  ratingImage?: Maybe<String>;
  ratingStar?: Maybe<Int>;
  user?: Maybe<UserUpdateOneRequiredWithoutRatingListInput>;
}

export interface CartItemCreateInput {
  id?: Maybe<ID_Input>;
  quantity?: Maybe<Int>;
  item: ItemCreateOneInput;
  user: UserCreateOneWithoutCartInput;
}

export interface UserUpdatepermissionsInput {
  set?: Maybe<Permission[] | Permission>;
}

export interface ItemCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  image?: Maybe<String>;
  largeImage?: Maybe<String>;
  price: Int;
  author?: Maybe<String>;
  categories?: Maybe<ItemCreatecategoriesInput>;
  user: UserCreateOneInput;
  ratingList?: Maybe<RatingCreateManyWithoutItemInput>;
}

export interface CartItemUpdateManyWithoutUserInput {
  create?: Maybe<
    CartItemCreateWithoutUserInput[] | CartItemCreateWithoutUserInput
  >;
  delete?: Maybe<CartItemWhereUniqueInput[] | CartItemWhereUniqueInput>;
  connect?: Maybe<CartItemWhereUniqueInput[] | CartItemWhereUniqueInput>;
  set?: Maybe<CartItemWhereUniqueInput[] | CartItemWhereUniqueInput>;
  disconnect?: Maybe<CartItemWhereUniqueInput[] | CartItemWhereUniqueInput>;
  update?: Maybe<
    | CartItemUpdateWithWhereUniqueWithoutUserInput[]
    | CartItemUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | CartItemUpsertWithWhereUniqueWithoutUserInput[]
    | CartItemUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<CartItemScalarWhereInput[] | CartItemScalarWhereInput>;
  updateMany?: Maybe<
    | CartItemUpdateManyWithWhereNestedInput[]
    | CartItemUpdateManyWithWhereNestedInput
  >;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface CartItemUpdateWithWhereUniqueWithoutUserInput {
  where: CartItemWhereUniqueInput;
  data: CartItemUpdateWithoutUserDataInput;
}

export interface UserCreatepermissionsInput {
  set?: Maybe<Permission[] | Permission>;
}

export interface CartItemUpdateWithoutUserDataInput {
  quantity?: Maybe<Int>;
  item?: Maybe<ItemUpdateOneRequiredInput>;
}

export interface CartItemCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  quantity?: Maybe<Int>;
  item: ItemCreateOneInput;
}

export interface CartItemUpsertWithWhereUniqueWithoutUserInput {
  where: CartItemWhereUniqueInput;
  update: CartItemUpdateWithoutUserDataInput;
  create: CartItemCreateWithoutUserInput;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetToken_not?: Maybe<String>;
  resetToken_in?: Maybe<String[] | String>;
  resetToken_not_in?: Maybe<String[] | String>;
  resetToken_lt?: Maybe<String>;
  resetToken_lte?: Maybe<String>;
  resetToken_gt?: Maybe<String>;
  resetToken_gte?: Maybe<String>;
  resetToken_contains?: Maybe<String>;
  resetToken_not_contains?: Maybe<String>;
  resetToken_starts_with?: Maybe<String>;
  resetToken_not_starts_with?: Maybe<String>;
  resetToken_ends_with?: Maybe<String>;
  resetToken_not_ends_with?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  resetTokenExpiry_not?: Maybe<Float>;
  resetTokenExpiry_in?: Maybe<Float[] | Float>;
  resetTokenExpiry_not_in?: Maybe<Float[] | Float>;
  resetTokenExpiry_lt?: Maybe<Float>;
  resetTokenExpiry_lte?: Maybe<Float>;
  resetTokenExpiry_gt?: Maybe<Float>;
  resetTokenExpiry_gte?: Maybe<Float>;
  cart_every?: Maybe<CartItemWhereInput>;
  cart_some?: Maybe<CartItemWhereInput>;
  cart_none?: Maybe<CartItemWhereInput>;
  ratingList_every?: Maybe<RatingWhereInput>;
  ratingList_some?: Maybe<RatingWhereInput>;
  ratingList_none?: Maybe<RatingWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface CartItemScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  AND?: Maybe<CartItemScalarWhereInput[] | CartItemScalarWhereInput>;
  OR?: Maybe<CartItemScalarWhereInput[] | CartItemScalarWhereInput>;
  NOT?: Maybe<CartItemScalarWhereInput[] | CartItemScalarWhereInput>;
}

export interface ItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ItemWhereInput>;
  AND?: Maybe<ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput>;
  OR?: Maybe<ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput>;
  NOT?: Maybe<ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput>;
}

export interface CartItemUpdateManyWithWhereNestedInput {
  where: CartItemScalarWhereInput;
  data: CartItemUpdateManyDataInput;
}

export interface RatingUpdateManyMutationInput {
  ratingSubject?: Maybe<String>;
  ratingDescription?: Maybe<String>;
  ratingImage?: Maybe<String>;
  ratingStar?: Maybe<Int>;
}

export interface CartItemUpdateManyDataInput {
  quantity?: Maybe<Int>;
}

export interface ItemUpdateManyMutationInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  image?: Maybe<String>;
  largeImage?: Maybe<String>;
  price?: Maybe<Int>;
  author?: Maybe<String>;
  categories?: Maybe<ItemUpdatecategoriesInput>;
}

export interface RatingUpdateManyWithoutUserInput {
  create?: Maybe<RatingCreateWithoutUserInput[] | RatingCreateWithoutUserInput>;
  delete?: Maybe<RatingWhereUniqueInput[] | RatingWhereUniqueInput>;
  connect?: Maybe<RatingWhereUniqueInput[] | RatingWhereUniqueInput>;
  set?: Maybe<RatingWhereUniqueInput[] | RatingWhereUniqueInput>;
  disconnect?: Maybe<RatingWhereUniqueInput[] | RatingWhereUniqueInput>;
  update?: Maybe<
    | RatingUpdateWithWhereUniqueWithoutUserInput[]
    | RatingUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | RatingUpsertWithWhereUniqueWithoutUserInput[]
    | RatingUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<RatingScalarWhereInput[] | RatingScalarWhereInput>;
  updateMany?: Maybe<
    | RatingUpdateManyWithWhereNestedInput[]
    | RatingUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpsertWithoutCartInput {
  update: UserUpdateWithoutCartDataInput;
  create: UserCreateWithoutCartInput;
}

export interface RatingUpdateWithWhereUniqueWithoutUserInput {
  where: RatingWhereUniqueInput;
  data: RatingUpdateWithoutUserDataInput;
}

export interface ItemUpsertNestedInput {
  update: ItemUpdateDataInput;
  create: ItemCreateInput;
}

export interface RatingUpdateWithoutUserDataInput {
  ratingSubject?: Maybe<String>;
  ratingDescription?: Maybe<String>;
  ratingImage?: Maybe<String>;
  ratingStar?: Maybe<Int>;
  item?: Maybe<ItemUpdateOneRequiredWithoutRatingListInput>;
}

export interface ItemCreatecategoriesInput {
  set?: Maybe<Category[] | Category>;
}

export interface ItemUpdateOneRequiredWithoutRatingListInput {
  create?: Maybe<ItemCreateWithoutRatingListInput>;
  update?: Maybe<ItemUpdateWithoutRatingListDataInput>;
  upsert?: Maybe<ItemUpsertWithoutRatingListInput>;
  connect?: Maybe<ItemWhereUniqueInput>;
}

export interface CartItemCreateManyWithoutUserInput {
  create?: Maybe<
    CartItemCreateWithoutUserInput[] | CartItemCreateWithoutUserInput
  >;
  connect?: Maybe<CartItemWhereUniqueInput[] | CartItemWhereUniqueInput>;
}

export interface ItemUpdateWithoutRatingListDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  image?: Maybe<String>;
  largeImage?: Maybe<String>;
  price?: Maybe<Int>;
  author?: Maybe<String>;
  categories?: Maybe<ItemUpdatecategoriesInput>;
  user?: Maybe<UserUpdateOneRequiredInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface ItemUpsertWithoutRatingListInput {
  update: ItemUpdateWithoutRatingListDataInput;
  create: ItemCreateWithoutRatingListInput;
}

export type ItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface RatingUpsertWithWhereUniqueWithoutUserInput {
  where: RatingWhereUniqueInput;
  update: RatingUpdateWithoutUserDataInput;
  create: RatingCreateWithoutUserInput;
}

export interface UserUpdateOneRequiredWithoutCartInput {
  create?: Maybe<UserCreateWithoutCartInput>;
  update?: Maybe<UserUpdateWithoutCartDataInput>;
  upsert?: Maybe<UserUpsertWithoutCartInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface RatingScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  ratingSubject?: Maybe<String>;
  ratingSubject_not?: Maybe<String>;
  ratingSubject_in?: Maybe<String[] | String>;
  ratingSubject_not_in?: Maybe<String[] | String>;
  ratingSubject_lt?: Maybe<String>;
  ratingSubject_lte?: Maybe<String>;
  ratingSubject_gt?: Maybe<String>;
  ratingSubject_gte?: Maybe<String>;
  ratingSubject_contains?: Maybe<String>;
  ratingSubject_not_contains?: Maybe<String>;
  ratingSubject_starts_with?: Maybe<String>;
  ratingSubject_not_starts_with?: Maybe<String>;
  ratingSubject_ends_with?: Maybe<String>;
  ratingSubject_not_ends_with?: Maybe<String>;
  ratingDescription?: Maybe<String>;
  ratingDescription_not?: Maybe<String>;
  ratingDescription_in?: Maybe<String[] | String>;
  ratingDescription_not_in?: Maybe<String[] | String>;
  ratingDescription_lt?: Maybe<String>;
  ratingDescription_lte?: Maybe<String>;
  ratingDescription_gt?: Maybe<String>;
  ratingDescription_gte?: Maybe<String>;
  ratingDescription_contains?: Maybe<String>;
  ratingDescription_not_contains?: Maybe<String>;
  ratingDescription_starts_with?: Maybe<String>;
  ratingDescription_not_starts_with?: Maybe<String>;
  ratingDescription_ends_with?: Maybe<String>;
  ratingDescription_not_ends_with?: Maybe<String>;
  ratingImage?: Maybe<String>;
  ratingImage_not?: Maybe<String>;
  ratingImage_in?: Maybe<String[] | String>;
  ratingImage_not_in?: Maybe<String[] | String>;
  ratingImage_lt?: Maybe<String>;
  ratingImage_lte?: Maybe<String>;
  ratingImage_gt?: Maybe<String>;
  ratingImage_gte?: Maybe<String>;
  ratingImage_contains?: Maybe<String>;
  ratingImage_not_contains?: Maybe<String>;
  ratingImage_starts_with?: Maybe<String>;
  ratingImage_not_starts_with?: Maybe<String>;
  ratingImage_ends_with?: Maybe<String>;
  ratingImage_not_ends_with?: Maybe<String>;
  ratingStar?: Maybe<Int>;
  ratingStar_not?: Maybe<Int>;
  ratingStar_in?: Maybe<Int[] | Int>;
  ratingStar_not_in?: Maybe<Int[] | Int>;
  ratingStar_lt?: Maybe<Int>;
  ratingStar_lte?: Maybe<Int>;
  ratingStar_gt?: Maybe<Int>;
  ratingStar_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<RatingScalarWhereInput[] | RatingScalarWhereInput>;
  OR?: Maybe<RatingScalarWhereInput[] | RatingScalarWhereInput>;
  NOT?: Maybe<RatingScalarWhereInput[] | RatingScalarWhereInput>;
}

export interface ItemCreateOneInput {
  create?: Maybe<ItemCreateInput>;
  connect?: Maybe<ItemWhereUniqueInput>;
}

export interface RatingUpdateManyWithoutItemInput {
  create?: Maybe<RatingCreateWithoutItemInput[] | RatingCreateWithoutItemInput>;
  delete?: Maybe<RatingWhereUniqueInput[] | RatingWhereUniqueInput>;
  connect?: Maybe<RatingWhereUniqueInput[] | RatingWhereUniqueInput>;
  set?: Maybe<RatingWhereUniqueInput[] | RatingWhereUniqueInput>;
  disconnect?: Maybe<RatingWhereUniqueInput[] | RatingWhereUniqueInput>;
  update?: Maybe<
    | RatingUpdateWithWhereUniqueWithoutItemInput[]
    | RatingUpdateWithWhereUniqueWithoutItemInput
  >;
  upsert?: Maybe<
    | RatingUpsertWithWhereUniqueWithoutItemInput[]
    | RatingUpsertWithWhereUniqueWithoutItemInput
  >;
  deleteMany?: Maybe<RatingScalarWhereInput[] | RatingScalarWhereInput>;
  updateMany?: Maybe<
    | RatingUpdateManyWithWhereNestedInput[]
    | RatingUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface RatingUpdateManyDataInput {
  ratingSubject?: Maybe<String>;
  ratingDescription?: Maybe<String>;
  ratingImage?: Maybe<String>;
  ratingStar?: Maybe<Int>;
}

export interface RatingUpdateManyWithWhereNestedInput {
  where: RatingScalarWhereInput;
  data: RatingUpdateManyDataInput;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  permissions?: Maybe<UserCreatepermissionsInput>;
  cart?: Maybe<CartItemCreateManyWithoutUserInput>;
  ratingList?: Maybe<RatingCreateManyWithoutUserInput>;
}

export interface UserUpsertWithoutRatingListInput {
  update: UserUpdateWithoutRatingListDataInput;
  create: UserCreateWithoutRatingListInput;
}

export interface CartItemUpdateManyMutationInput {
  quantity?: Maybe<Int>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  permissions?: Maybe<UserUpdatepermissionsInput>;
}

export interface CartItemWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  item?: Maybe<ItemWhereInput>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<CartItemWhereInput[] | CartItemWhereInput>;
  OR?: Maybe<CartItemWhereInput[] | CartItemWhereInput>;
  NOT?: Maybe<CartItemWhereInput[] | CartItemWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  permissions: Permission[];
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<Float>;
  permissions: () => Promise<Permission[]>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<Float>>;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
}

export interface CartItemEdge {
  node: CartItem;
  cursor: String;
}

export interface CartItemEdgePromise
  extends Promise<CartItemEdge>,
    Fragmentable {
  node: <T = CartItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CartItemEdgeSubscription
  extends Promise<AsyncIterator<CartItemEdge>>,
    Fragmentable {
  node: <T = CartItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  permissions: Permission[];
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<Float>;
  permissions: () => Promise<Permission[]>;
  cart: <T = FragmentableArray<CartItem>>(args?: {
    where?: CartItemWhereInput;
    orderBy?: CartItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  ratingList: <T = FragmentableArray<Rating>>(args?: {
    where?: RatingWhereInput;
    orderBy?: RatingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<Float>>;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
  cart: <T = Promise<AsyncIterator<CartItemSubscription>>>(args?: {
    where?: CartItemWhereInput;
    orderBy?: CartItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  ratingList: <T = Promise<AsyncIterator<RatingSubscription>>>(args?: {
    where?: RatingWhereInput;
    orderBy?: RatingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<Float>;
  permissions: () => Promise<Permission[]>;
  cart: <T = FragmentableArray<CartItem>>(args?: {
    where?: CartItemWhereInput;
    orderBy?: CartItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  ratingList: <T = FragmentableArray<Rating>>(args?: {
    where?: RatingWhereInput;
    orderBy?: RatingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Item {
  id: ID_Output;
  title: String;
  description: String;
  image?: String;
  largeImage?: String;
  price: Int;
  author?: String;
  categories: Category[];
  createdAt?: DateTimeOutput;
}

export interface ItemPromise extends Promise<Item>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  image: () => Promise<String>;
  largeImage: () => Promise<String>;
  price: () => Promise<Int>;
  author: () => Promise<String>;
  categories: () => Promise<Category[]>;
  createdAt: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
  ratingList: <T = FragmentableArray<Rating>>(args?: {
    where?: RatingWhereInput;
    orderBy?: RatingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ItemSubscription
  extends Promise<AsyncIterator<Item>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  largeImage: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  author: () => Promise<AsyncIterator<String>>;
  categories: () => Promise<AsyncIterator<Category[]>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  user: <T = UserSubscription>() => T;
  ratingList: <T = Promise<AsyncIterator<RatingSubscription>>>(args?: {
    where?: RatingWhereInput;
    orderBy?: RatingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ItemNullablePromise
  extends Promise<Item | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  image: () => Promise<String>;
  largeImage: () => Promise<String>;
  price: () => Promise<Int>;
  author: () => Promise<String>;
  categories: () => Promise<Category[]>;
  createdAt: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
  ratingList: <T = FragmentableArray<Rating>>(args?: {
    where?: RatingWhereInput;
    orderBy?: RatingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ItemPreviousValues {
  id: ID_Output;
  title: String;
  description: String;
  image?: String;
  largeImage?: String;
  price: Int;
  author?: String;
  categories: Category[];
  createdAt?: DateTimeOutput;
}

export interface ItemPreviousValuesPromise
  extends Promise<ItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  image: () => Promise<String>;
  largeImage: () => Promise<String>;
  price: () => Promise<Int>;
  author: () => Promise<String>;
  categories: () => Promise<Category[]>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ItemPreviousValuesSubscription
  extends Promise<AsyncIterator<ItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  largeImage: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  author: () => Promise<AsyncIterator<String>>;
  categories: () => Promise<AsyncIterator<Category[]>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateCartItem {
  count: Int;
}

export interface AggregateCartItemPromise
  extends Promise<AggregateCartItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCartItemSubscription
  extends Promise<AsyncIterator<AggregateCartItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RatingSubscriptionPayload {
  mutation: MutationType;
  node: Rating;
  updatedFields: String[];
  previousValues: RatingPreviousValues;
}

export interface RatingSubscriptionPayloadPromise
  extends Promise<RatingSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RatingPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RatingPreviousValuesPromise>() => T;
}

export interface RatingSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RatingSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RatingSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RatingPreviousValuesSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface RatingEdge {
  node: Rating;
  cursor: String;
}

export interface RatingEdgePromise extends Promise<RatingEdge>, Fragmentable {
  node: <T = RatingPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RatingEdgeSubscription
  extends Promise<AsyncIterator<RatingEdge>>,
    Fragmentable {
  node: <T = RatingSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateItem {
  count: Int;
}

export interface AggregateItemPromise
  extends Promise<AggregateItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateItemSubscription
  extends Promise<AsyncIterator<AggregateItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CartItemConnection {
  pageInfo: PageInfo;
  edges: CartItemEdge[];
}

export interface CartItemConnectionPromise
  extends Promise<CartItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CartItemEdge>>() => T;
  aggregate: <T = AggregateCartItemPromise>() => T;
}

export interface CartItemConnectionSubscription
  extends Promise<AsyncIterator<CartItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CartItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCartItemSubscription>() => T;
}

export interface RatingPreviousValues {
  id: ID_Output;
  ratingSubject: String;
  ratingDescription: String;
  ratingImage?: String;
  ratingStar: Int;
  createdAt?: DateTimeOutput;
}

export interface RatingPreviousValuesPromise
  extends Promise<RatingPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  ratingSubject: () => Promise<String>;
  ratingDescription: () => Promise<String>;
  ratingImage: () => Promise<String>;
  ratingStar: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface RatingPreviousValuesSubscription
  extends Promise<AsyncIterator<RatingPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  ratingSubject: () => Promise<AsyncIterator<String>>;
  ratingDescription: () => Promise<AsyncIterator<String>>;
  ratingImage: () => Promise<AsyncIterator<String>>;
  ratingStar: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CartItem {
  id: ID_Output;
  quantity: Int;
}

export interface CartItemPromise extends Promise<CartItem>, Fragmentable {
  id: () => Promise<ID_Output>;
  quantity: () => Promise<Int>;
  item: <T = ItemPromise>() => T;
  user: <T = UserPromise>() => T;
}

export interface CartItemSubscription
  extends Promise<AsyncIterator<CartItem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  item: <T = ItemSubscription>() => T;
  user: <T = UserSubscription>() => T;
}

export interface CartItemNullablePromise
  extends Promise<CartItem | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  quantity: () => Promise<Int>;
  item: <T = ItemPromise>() => T;
  user: <T = UserPromise>() => T;
}

export interface ItemConnection {
  pageInfo: PageInfo;
  edges: ItemEdge[];
}

export interface ItemConnectionPromise
  extends Promise<ItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ItemEdge>>() => T;
  aggregate: <T = AggregateItemPromise>() => T;
}

export interface ItemConnectionSubscription
  extends Promise<AsyncIterator<ItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateItemSubscription>() => T;
}

export interface AggregateRating {
  count: Int;
}

export interface AggregateRatingPromise
  extends Promise<AggregateRating>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRatingSubscription
  extends Promise<AsyncIterator<AggregateRating>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ItemSubscriptionPayload {
  mutation: MutationType;
  node: Item;
  updatedFields: String[];
  previousValues: ItemPreviousValues;
}

export interface ItemSubscriptionPayloadPromise
  extends Promise<ItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ItemPreviousValuesPromise>() => T;
}

export interface ItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ItemPreviousValuesSubscription>() => T;
}

export interface Rating {
  id: ID_Output;
  ratingSubject: String;
  ratingDescription: String;
  ratingImage?: String;
  ratingStar: Int;
  createdAt?: DateTimeOutput;
}

export interface RatingPromise extends Promise<Rating>, Fragmentable {
  id: () => Promise<ID_Output>;
  ratingSubject: () => Promise<String>;
  ratingDescription: () => Promise<String>;
  ratingImage: () => Promise<String>;
  ratingStar: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  item: <T = ItemPromise>() => T;
  user: <T = UserPromise>() => T;
}

export interface RatingSubscription
  extends Promise<AsyncIterator<Rating>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  ratingSubject: () => Promise<AsyncIterator<String>>;
  ratingDescription: () => Promise<AsyncIterator<String>>;
  ratingImage: () => Promise<AsyncIterator<String>>;
  ratingStar: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  item: <T = ItemSubscription>() => T;
  user: <T = UserSubscription>() => T;
}

export interface RatingNullablePromise
  extends Promise<Rating | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  ratingSubject: () => Promise<String>;
  ratingDescription: () => Promise<String>;
  ratingImage: () => Promise<String>;
  ratingStar: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  item: <T = ItemPromise>() => T;
  user: <T = UserPromise>() => T;
}

export interface CartItemPreviousValues {
  id: ID_Output;
  quantity: Int;
}

export interface CartItemPreviousValuesPromise
  extends Promise<CartItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  quantity: () => Promise<Int>;
}

export interface CartItemPreviousValuesSubscription
  extends Promise<AsyncIterator<CartItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  quantity: () => Promise<AsyncIterator<Int>>;
}

export interface CartItemSubscriptionPayload {
  mutation: MutationType;
  node: CartItem;
  updatedFields: String[];
  previousValues: CartItemPreviousValues;
}

export interface CartItemSubscriptionPayloadPromise
  extends Promise<CartItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CartItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CartItemPreviousValuesPromise>() => T;
}

export interface CartItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CartItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CartItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CartItemPreviousValuesSubscription>() => T;
}

export interface RatingConnection {
  pageInfo: PageInfo;
  edges: RatingEdge[];
}

export interface RatingConnectionPromise
  extends Promise<RatingConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RatingEdge>>() => T;
  aggregate: <T = AggregateRatingPromise>() => T;
}

export interface RatingConnectionSubscription
  extends Promise<AsyncIterator<RatingConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RatingEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRatingSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface ItemEdge {
  node: Item;
  cursor: String;
}

export interface ItemEdgePromise extends Promise<ItemEdge>, Fragmentable {
  node: <T = ItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ItemEdgeSubscription
  extends Promise<AsyncIterator<ItemEdge>>,
    Fragmentable {
  node: <T = ItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Permission",
    embedded: false
  },
  {
    name: "Category",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Item",
    embedded: false
  },
  {
    name: "CartItem",
    embedded: false
  },
  {
    name: "Rating",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://eu1.prisma.sh/michael-sokan/stax-of-storiesstories/dev`
});
export const prisma = new Prisma();
