// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateCartItem {
  count: Int!
}

type AggregateItem {
  count: Int!
}

type AggregateRating {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type CartItem {
  id: ID!
  quantity: Int!
  item: Item!
  user: User!
}

type CartItemConnection {
  pageInfo: PageInfo!
  edges: [CartItemEdge]!
  aggregate: AggregateCartItem!
}

input CartItemCreateInput {
  id: ID
  quantity: Int
  item: ItemCreateOneInput!
  user: UserCreateOneWithoutCartInput!
}

input CartItemCreateManyWithoutUserInput {
  create: [CartItemCreateWithoutUserInput!]
  connect: [CartItemWhereUniqueInput!]
}

input CartItemCreateWithoutUserInput {
  id: ID
  quantity: Int
  item: ItemCreateOneInput!
}

type CartItemEdge {
  node: CartItem!
  cursor: String!
}

enum CartItemOrderByInput {
  id_ASC
  id_DESC
  quantity_ASC
  quantity_DESC
}

type CartItemPreviousValues {
  id: ID!
  quantity: Int!
}

input CartItemScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  AND: [CartItemScalarWhereInput!]
  OR: [CartItemScalarWhereInput!]
  NOT: [CartItemScalarWhereInput!]
}

type CartItemSubscriptionPayload {
  mutation: MutationType!
  node: CartItem
  updatedFields: [String!]
  previousValues: CartItemPreviousValues
}

input CartItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CartItemWhereInput
  AND: [CartItemSubscriptionWhereInput!]
  OR: [CartItemSubscriptionWhereInput!]
  NOT: [CartItemSubscriptionWhereInput!]
}

input CartItemUpdateInput {
  quantity: Int
  item: ItemUpdateOneRequiredInput
  user: UserUpdateOneRequiredWithoutCartInput
}

input CartItemUpdateManyDataInput {
  quantity: Int
}

input CartItemUpdateManyMutationInput {
  quantity: Int
}

input CartItemUpdateManyWithoutUserInput {
  create: [CartItemCreateWithoutUserInput!]
  delete: [CartItemWhereUniqueInput!]
  connect: [CartItemWhereUniqueInput!]
  set: [CartItemWhereUniqueInput!]
  disconnect: [CartItemWhereUniqueInput!]
  update: [CartItemUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [CartItemUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [CartItemScalarWhereInput!]
  updateMany: [CartItemUpdateManyWithWhereNestedInput!]
}

input CartItemUpdateManyWithWhereNestedInput {
  where: CartItemScalarWhereInput!
  data: CartItemUpdateManyDataInput!
}

input CartItemUpdateWithoutUserDataInput {
  quantity: Int
  item: ItemUpdateOneRequiredInput
}

input CartItemUpdateWithWhereUniqueWithoutUserInput {
  where: CartItemWhereUniqueInput!
  data: CartItemUpdateWithoutUserDataInput!
}

input CartItemUpsertWithWhereUniqueWithoutUserInput {
  where: CartItemWhereUniqueInput!
  update: CartItemUpdateWithoutUserDataInput!
  create: CartItemCreateWithoutUserInput!
}

input CartItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  item: ItemWhereInput
  user: UserWhereInput
  AND: [CartItemWhereInput!]
  OR: [CartItemWhereInput!]
  NOT: [CartItemWhereInput!]
}

input CartItemWhereUniqueInput {
  id: ID
}

enum Category {
  YEAR_0
  YEAR_1_4
  YEAR_5_6
  YEAR_7_8
  YEAR_8_9
  YEAR_10_11
  YEAR_12_13
  POETRY
  WRITING
  INSPIRE
  SCIENCE
  POLITICS
  LIFESTYLE
  HISTORY
  ANIMALS
  PARENTHOOD
  TRAVEL
  INDIA
  CHINA
  AFRICA
  US
  UK
  WORLD
}

scalar DateTime

type Item {
  id: ID!
  title: String!
  description: String!
  image: String
  largeImage: String
  price: Int!
  author: String
  categories: [Category!]!
  createdAt: DateTime
  user: User!
  ratingList(where: RatingWhereInput, orderBy: RatingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Rating!]
}

type ItemConnection {
  pageInfo: PageInfo!
  edges: [ItemEdge]!
  aggregate: AggregateItem!
}

input ItemCreatecategoriesInput {
  set: [Category!]
}

input ItemCreateInput {
  id: ID
  title: String!
  description: String!
  image: String
  largeImage: String
  price: Int!
  author: String
  categories: ItemCreatecategoriesInput
  user: UserCreateOneInput!
  ratingList: RatingCreateManyWithoutItemInput
}

input ItemCreateOneInput {
  create: ItemCreateInput
  connect: ItemWhereUniqueInput
}

input ItemCreateOneWithoutRatingListInput {
  create: ItemCreateWithoutRatingListInput
  connect: ItemWhereUniqueInput
}

input ItemCreateWithoutRatingListInput {
  id: ID
  title: String!
  description: String!
  image: String
  largeImage: String
  price: Int!
  author: String
  categories: ItemCreatecategoriesInput
  user: UserCreateOneInput!
}

type ItemEdge {
  node: Item!
  cursor: String!
}

enum ItemOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  image_ASC
  image_DESC
  largeImage_ASC
  largeImage_DESC
  price_ASC
  price_DESC
  author_ASC
  author_DESC
  createdAt_ASC
  createdAt_DESC
}

type ItemPreviousValues {
  id: ID!
  title: String!
  description: String!
  image: String
  largeImage: String
  price: Int!
  author: String
  categories: [Category!]!
  createdAt: DateTime
}

type ItemSubscriptionPayload {
  mutation: MutationType!
  node: Item
  updatedFields: [String!]
  previousValues: ItemPreviousValues
}

input ItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ItemWhereInput
  AND: [ItemSubscriptionWhereInput!]
  OR: [ItemSubscriptionWhereInput!]
  NOT: [ItemSubscriptionWhereInput!]
}

input ItemUpdatecategoriesInput {
  set: [Category!]
}

input ItemUpdateDataInput {
  title: String
  description: String
  image: String
  largeImage: String
  price: Int
  author: String
  categories: ItemUpdatecategoriesInput
  user: UserUpdateOneRequiredInput
  ratingList: RatingUpdateManyWithoutItemInput
}

input ItemUpdateInput {
  title: String
  description: String
  image: String
  largeImage: String
  price: Int
  author: String
  categories: ItemUpdatecategoriesInput
  user: UserUpdateOneRequiredInput
  ratingList: RatingUpdateManyWithoutItemInput
}

input ItemUpdateManyMutationInput {
  title: String
  description: String
  image: String
  largeImage: String
  price: Int
  author: String
  categories: ItemUpdatecategoriesInput
}

input ItemUpdateOneRequiredInput {
  create: ItemCreateInput
  update: ItemUpdateDataInput
  upsert: ItemUpsertNestedInput
  connect: ItemWhereUniqueInput
}

input ItemUpdateOneRequiredWithoutRatingListInput {
  create: ItemCreateWithoutRatingListInput
  update: ItemUpdateWithoutRatingListDataInput
  upsert: ItemUpsertWithoutRatingListInput
  connect: ItemWhereUniqueInput
}

input ItemUpdateWithoutRatingListDataInput {
  title: String
  description: String
  image: String
  largeImage: String
  price: Int
  author: String
  categories: ItemUpdatecategoriesInput
  user: UserUpdateOneRequiredInput
}

input ItemUpsertNestedInput {
  update: ItemUpdateDataInput!
  create: ItemCreateInput!
}

input ItemUpsertWithoutRatingListInput {
  update: ItemUpdateWithoutRatingListDataInput!
  create: ItemCreateWithoutRatingListInput!
}

input ItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  largeImage: String
  largeImage_not: String
  largeImage_in: [String!]
  largeImage_not_in: [String!]
  largeImage_lt: String
  largeImage_lte: String
  largeImage_gt: String
  largeImage_gte: String
  largeImage_contains: String
  largeImage_not_contains: String
  largeImage_starts_with: String
  largeImage_not_starts_with: String
  largeImage_ends_with: String
  largeImage_not_ends_with: String
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  user: UserWhereInput
  ratingList_every: RatingWhereInput
  ratingList_some: RatingWhereInput
  ratingList_none: RatingWhereInput
  AND: [ItemWhereInput!]
  OR: [ItemWhereInput!]
  NOT: [ItemWhereInput!]
}

input ItemWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createCartItem(data: CartItemCreateInput!): CartItem!
  updateCartItem(data: CartItemUpdateInput!, where: CartItemWhereUniqueInput!): CartItem
  updateManyCartItems(data: CartItemUpdateManyMutationInput!, where: CartItemWhereInput): BatchPayload!
  upsertCartItem(where: CartItemWhereUniqueInput!, create: CartItemCreateInput!, update: CartItemUpdateInput!): CartItem!
  deleteCartItem(where: CartItemWhereUniqueInput!): CartItem
  deleteManyCartItems(where: CartItemWhereInput): BatchPayload!
  createItem(data: ItemCreateInput!): Item!
  updateItem(data: ItemUpdateInput!, where: ItemWhereUniqueInput!): Item
  updateManyItems(data: ItemUpdateManyMutationInput!, where: ItemWhereInput): BatchPayload!
  upsertItem(where: ItemWhereUniqueInput!, create: ItemCreateInput!, update: ItemUpdateInput!): Item!
  deleteItem(where: ItemWhereUniqueInput!): Item
  deleteManyItems(where: ItemWhereInput): BatchPayload!
  createRating(data: RatingCreateInput!): Rating!
  updateRating(data: RatingUpdateInput!, where: RatingWhereUniqueInput!): Rating
  updateManyRatings(data: RatingUpdateManyMutationInput!, where: RatingWhereInput): BatchPayload!
  upsertRating(where: RatingWhereUniqueInput!, create: RatingCreateInput!, update: RatingUpdateInput!): Rating!
  deleteRating(where: RatingWhereUniqueInput!): Rating
  deleteManyRatings(where: RatingWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

enum Permission {
  ADMIN
  USER
  ITEMCREATE
  ITEMUPDATE
  ITEMDELETE
  PERMISSIONUPDATE
  RATINGCREATE
}

type Query {
  cartItem(where: CartItemWhereUniqueInput!): CartItem
  cartItems(where: CartItemWhereInput, orderBy: CartItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CartItem]!
  cartItemsConnection(where: CartItemWhereInput, orderBy: CartItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CartItemConnection!
  item(where: ItemWhereUniqueInput!): Item
  items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Item]!
  itemsConnection(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ItemConnection!
  rating(where: RatingWhereUniqueInput!): Rating
  ratings(where: RatingWhereInput, orderBy: RatingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Rating]!
  ratingsConnection(where: RatingWhereInput, orderBy: RatingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RatingConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Rating {
  id: ID!
  ratingSubject: String!
  ratingDescription: String!
  ratingImage: String
  ratingStar: Int!
  createdAt: DateTime
  item: Item!
  user: User!
}

type RatingConnection {
  pageInfo: PageInfo!
  edges: [RatingEdge]!
  aggregate: AggregateRating!
}

input RatingCreateInput {
  id: ID
  ratingSubject: String!
  ratingDescription: String!
  ratingImage: String
  ratingStar: Int
  item: ItemCreateOneWithoutRatingListInput!
  user: UserCreateOneWithoutRatingListInput!
}

input RatingCreateManyWithoutItemInput {
  create: [RatingCreateWithoutItemInput!]
  connect: [RatingWhereUniqueInput!]
}

input RatingCreateManyWithoutUserInput {
  create: [RatingCreateWithoutUserInput!]
  connect: [RatingWhereUniqueInput!]
}

input RatingCreateWithoutItemInput {
  id: ID
  ratingSubject: String!
  ratingDescription: String!
  ratingImage: String
  ratingStar: Int
  user: UserCreateOneWithoutRatingListInput!
}

input RatingCreateWithoutUserInput {
  id: ID
  ratingSubject: String!
  ratingDescription: String!
  ratingImage: String
  ratingStar: Int
  item: ItemCreateOneWithoutRatingListInput!
}

type RatingEdge {
  node: Rating!
  cursor: String!
}

enum RatingOrderByInput {
  id_ASC
  id_DESC
  ratingSubject_ASC
  ratingSubject_DESC
  ratingDescription_ASC
  ratingDescription_DESC
  ratingImage_ASC
  ratingImage_DESC
  ratingStar_ASC
  ratingStar_DESC
  createdAt_ASC
  createdAt_DESC
}

type RatingPreviousValues {
  id: ID!
  ratingSubject: String!
  ratingDescription: String!
  ratingImage: String
  ratingStar: Int!
  createdAt: DateTime
}

input RatingScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  ratingSubject: String
  ratingSubject_not: String
  ratingSubject_in: [String!]
  ratingSubject_not_in: [String!]
  ratingSubject_lt: String
  ratingSubject_lte: String
  ratingSubject_gt: String
  ratingSubject_gte: String
  ratingSubject_contains: String
  ratingSubject_not_contains: String
  ratingSubject_starts_with: String
  ratingSubject_not_starts_with: String
  ratingSubject_ends_with: String
  ratingSubject_not_ends_with: String
  ratingDescription: String
  ratingDescription_not: String
  ratingDescription_in: [String!]
  ratingDescription_not_in: [String!]
  ratingDescription_lt: String
  ratingDescription_lte: String
  ratingDescription_gt: String
  ratingDescription_gte: String
  ratingDescription_contains: String
  ratingDescription_not_contains: String
  ratingDescription_starts_with: String
  ratingDescription_not_starts_with: String
  ratingDescription_ends_with: String
  ratingDescription_not_ends_with: String
  ratingImage: String
  ratingImage_not: String
  ratingImage_in: [String!]
  ratingImage_not_in: [String!]
  ratingImage_lt: String
  ratingImage_lte: String
  ratingImage_gt: String
  ratingImage_gte: String
  ratingImage_contains: String
  ratingImage_not_contains: String
  ratingImage_starts_with: String
  ratingImage_not_starts_with: String
  ratingImage_ends_with: String
  ratingImage_not_ends_with: String
  ratingStar: Int
  ratingStar_not: Int
  ratingStar_in: [Int!]
  ratingStar_not_in: [Int!]
  ratingStar_lt: Int
  ratingStar_lte: Int
  ratingStar_gt: Int
  ratingStar_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [RatingScalarWhereInput!]
  OR: [RatingScalarWhereInput!]
  NOT: [RatingScalarWhereInput!]
}

type RatingSubscriptionPayload {
  mutation: MutationType!
  node: Rating
  updatedFields: [String!]
  previousValues: RatingPreviousValues
}

input RatingSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RatingWhereInput
  AND: [RatingSubscriptionWhereInput!]
  OR: [RatingSubscriptionWhereInput!]
  NOT: [RatingSubscriptionWhereInput!]
}

input RatingUpdateInput {
  ratingSubject: String
  ratingDescription: String
  ratingImage: String
  ratingStar: Int
  item: ItemUpdateOneRequiredWithoutRatingListInput
  user: UserUpdateOneRequiredWithoutRatingListInput
}

input RatingUpdateManyDataInput {
  ratingSubject: String
  ratingDescription: String
  ratingImage: String
  ratingStar: Int
}

input RatingUpdateManyMutationInput {
  ratingSubject: String
  ratingDescription: String
  ratingImage: String
  ratingStar: Int
}

input RatingUpdateManyWithoutItemInput {
  create: [RatingCreateWithoutItemInput!]
  delete: [RatingWhereUniqueInput!]
  connect: [RatingWhereUniqueInput!]
  set: [RatingWhereUniqueInput!]
  disconnect: [RatingWhereUniqueInput!]
  update: [RatingUpdateWithWhereUniqueWithoutItemInput!]
  upsert: [RatingUpsertWithWhereUniqueWithoutItemInput!]
  deleteMany: [RatingScalarWhereInput!]
  updateMany: [RatingUpdateManyWithWhereNestedInput!]
}

input RatingUpdateManyWithoutUserInput {
  create: [RatingCreateWithoutUserInput!]
  delete: [RatingWhereUniqueInput!]
  connect: [RatingWhereUniqueInput!]
  set: [RatingWhereUniqueInput!]
  disconnect: [RatingWhereUniqueInput!]
  update: [RatingUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [RatingUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [RatingScalarWhereInput!]
  updateMany: [RatingUpdateManyWithWhereNestedInput!]
}

input RatingUpdateManyWithWhereNestedInput {
  where: RatingScalarWhereInput!
  data: RatingUpdateManyDataInput!
}

input RatingUpdateWithoutItemDataInput {
  ratingSubject: String
  ratingDescription: String
  ratingImage: String
  ratingStar: Int
  user: UserUpdateOneRequiredWithoutRatingListInput
}

input RatingUpdateWithoutUserDataInput {
  ratingSubject: String
  ratingDescription: String
  ratingImage: String
  ratingStar: Int
  item: ItemUpdateOneRequiredWithoutRatingListInput
}

input RatingUpdateWithWhereUniqueWithoutItemInput {
  where: RatingWhereUniqueInput!
  data: RatingUpdateWithoutItemDataInput!
}

input RatingUpdateWithWhereUniqueWithoutUserInput {
  where: RatingWhereUniqueInput!
  data: RatingUpdateWithoutUserDataInput!
}

input RatingUpsertWithWhereUniqueWithoutItemInput {
  where: RatingWhereUniqueInput!
  update: RatingUpdateWithoutItemDataInput!
  create: RatingCreateWithoutItemInput!
}

input RatingUpsertWithWhereUniqueWithoutUserInput {
  where: RatingWhereUniqueInput!
  update: RatingUpdateWithoutUserDataInput!
  create: RatingCreateWithoutUserInput!
}

input RatingWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  ratingSubject: String
  ratingSubject_not: String
  ratingSubject_in: [String!]
  ratingSubject_not_in: [String!]
  ratingSubject_lt: String
  ratingSubject_lte: String
  ratingSubject_gt: String
  ratingSubject_gte: String
  ratingSubject_contains: String
  ratingSubject_not_contains: String
  ratingSubject_starts_with: String
  ratingSubject_not_starts_with: String
  ratingSubject_ends_with: String
  ratingSubject_not_ends_with: String
  ratingDescription: String
  ratingDescription_not: String
  ratingDescription_in: [String!]
  ratingDescription_not_in: [String!]
  ratingDescription_lt: String
  ratingDescription_lte: String
  ratingDescription_gt: String
  ratingDescription_gte: String
  ratingDescription_contains: String
  ratingDescription_not_contains: String
  ratingDescription_starts_with: String
  ratingDescription_not_starts_with: String
  ratingDescription_ends_with: String
  ratingDescription_not_ends_with: String
  ratingImage: String
  ratingImage_not: String
  ratingImage_in: [String!]
  ratingImage_not_in: [String!]
  ratingImage_lt: String
  ratingImage_lte: String
  ratingImage_gt: String
  ratingImage_gte: String
  ratingImage_contains: String
  ratingImage_not_contains: String
  ratingImage_starts_with: String
  ratingImage_not_starts_with: String
  ratingImage_ends_with: String
  ratingImage_not_ends_with: String
  ratingStar: Int
  ratingStar_not: Int
  ratingStar_in: [Int!]
  ratingStar_not_in: [Int!]
  ratingStar_lt: Int
  ratingStar_lte: Int
  ratingStar_gt: Int
  ratingStar_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  item: ItemWhereInput
  user: UserWhereInput
  AND: [RatingWhereInput!]
  OR: [RatingWhereInput!]
  NOT: [RatingWhereInput!]
}

input RatingWhereUniqueInput {
  id: ID
}

type Subscription {
  cartItem(where: CartItemSubscriptionWhereInput): CartItemSubscriptionPayload
  item(where: ItemSubscriptionWhereInput): ItemSubscriptionPayload
  rating(where: RatingSubscriptionWhereInput): RatingSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
  cart(where: CartItemWhereInput, orderBy: CartItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CartItem!]
  ratingList(where: RatingWhereInput, orderBy: RatingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Rating!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  cart: CartItemCreateManyWithoutUserInput
  ratingList: RatingCreateManyWithoutUserInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCartInput {
  create: UserCreateWithoutCartInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutRatingListInput {
  create: UserCreateWithoutRatingListInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

input UserCreateWithoutCartInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  ratingList: RatingCreateManyWithoutUserInput
}

input UserCreateWithoutRatingListInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  cart: CartItemCreateManyWithoutUserInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  cart: CartItemUpdateManyWithoutUserInput
  ratingList: RatingUpdateManyWithoutUserInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  cart: CartItemUpdateManyWithoutUserInput
  ratingList: RatingUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutCartInput {
  create: UserCreateWithoutCartInput
  update: UserUpdateWithoutCartDataInput
  upsert: UserUpsertWithoutCartInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutRatingListInput {
  create: UserCreateWithoutRatingListInput
  update: UserUpdateWithoutRatingListDataInput
  upsert: UserUpsertWithoutRatingListInput
  connect: UserWhereUniqueInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserUpdateWithoutCartDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  ratingList: RatingUpdateManyWithoutUserInput
}

input UserUpdateWithoutRatingListDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  cart: CartItemUpdateManyWithoutUserInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutCartInput {
  update: UserUpdateWithoutCartDataInput!
  create: UserCreateWithoutCartInput!
}

input UserUpsertWithoutRatingListInput {
  update: UserUpdateWithoutRatingListDataInput!
  create: UserCreateWithoutRatingListInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  resetToken: String
  resetToken_not: String
  resetToken_in: [String!]
  resetToken_not_in: [String!]
  resetToken_lt: String
  resetToken_lte: String
  resetToken_gt: String
  resetToken_gte: String
  resetToken_contains: String
  resetToken_not_contains: String
  resetToken_starts_with: String
  resetToken_not_starts_with: String
  resetToken_ends_with: String
  resetToken_not_ends_with: String
  resetTokenExpiry: Float
  resetTokenExpiry_not: Float
  resetTokenExpiry_in: [Float!]
  resetTokenExpiry_not_in: [Float!]
  resetTokenExpiry_lt: Float
  resetTokenExpiry_lte: Float
  resetTokenExpiry_gt: Float
  resetTokenExpiry_gte: Float
  cart_every: CartItemWhereInput
  cart_some: CartItemWhereInput
  cart_none: CartItemWhereInput
  ratingList_every: RatingWhereInput
  ratingList_some: RatingWhereInput
  ratingList_none: RatingWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`